# Event Image Handling Refactor PRD

## Overview
Refactor the event creation and editing forms' image handling system to eliminate redundancy, add default images, and create a cleaner, more maintainable architecture. Currently, the system stores image data in both `cover_image_url` and `external_image_data` fields, creating unnecessary complexity and data duplication.

## Current State Issues
1. **Data Redundancy**: Image URLs stored in both `cover_image_url` and `external_image_data`
2. **No Default Images**: Events without images show empty state
3. **Inconsistent Metadata**: Different data structures for Unsplash, TMDB, and uploads
4. **Complex Form Logic**: Dual field handling in LiveView components
5. **Maintenance Burden**: Template logic must handle both fields

## Goals
1. **Add Default Images**: Provide appealing fallback images for new events
2. **Eliminate Redundancy**: Single source of truth for image data
3. **Standardize Metadata**: Consistent data structure across all image sources
4. **Simplify Codebase**: Reduce complexity in forms and templates
5. **Improve UX**: Better user experience with default images and cleaner interface

## Technical Requirements

### Phase 1: Add Default Images (Current Schema)
- Create default image collection in `priv/static/images/events/defaults/`
- Add 8 default images covering common event categories:
  - concert.jpg (live music events)
  - conference.jpg (business/professional meetings) 
  - festival.jpg (festivals and cultural events)
  - sports.jpg (sporting events and competitions)
  - party.jpg (social gatherings and celebrations)
  - education.jpg (workshops and learning events)
  - business.jpg (corporate events and networking)
  - general.jpg (catch-all for other events)
- Implement default image selection logic in event creation
- Randomly assign default image when creating new event
- Allow users to override default with Unsplash/TMDB/upload options

### Phase 2: Standardize Image Data Structure
- Design unified image metadata schema for all sources:
  ```json
  {
    "source": "default|unsplash|tmdb|upload",
    "url": "actual_display_url",
    "metadata": {
      // Source-specific data varies by type
    }
  }
  ```
- Maintain both fields during transition for backward compatibility
- Update form logic to use standardized structure
- Ensure proper attribution for Unsplash/TMDB images

### Phase 3: Database Schema Migration  
- Remove `cover_image_url` field from events table
- Migrate existing data to `external_image_data` with standardized format
- Update all database queries and model logic
- Add database constraints and validations

### Phase 4: Clean Up Codebase
- Remove dual field handling from LiveView controllers
- Simplify form templates and components
- Update display templates to use single image source
- Remove obsolete helper functions and assigns

## Image Source Specifications

### Default Images
- **Storage**: `priv/static/images/events/defaults/`
- **Format**: JPEG, optimized for web (under 200KB each)
- **Dimensions**: 800x400px (2:1 aspect ratio)
- **Style**: Professional, appealing, relevant to category
- **Data Structure**:
  ```json
  {
    "source": "default",
    "url": "/images/events/defaults/concert.jpg",
    "metadata": {
      "category": "concert",
      "filename": "concert.jpg"
    }
  }
  ```

### Unsplash Images  
- **API**: Maintain current Unsplash integration
- **Attribution**: Preserve photographer credit requirements
- **Data Structure**:
  ```json
  {
    "source": "unsplash", 
    "url": "https://images.unsplash.com/...",
    "metadata": {
      "photo_id": "abc123",
      "photographer_name": "John Doe",
      "photographer_url": "https://unsplash.com/@johndoe",
      "download_location": "https://api.unsplash.com/photos/abc123/download"
    }
  }
  ```

### TMDB Images
- **API**: Maintain current TMDB integration  
- **Attribution**: Link to TMDB source
- **Data Structure**:
  ```json
  {
    "source": "tmdb",
    "url": "https://image.tmdb.org/t/p/w500/poster.jpg", 
    "metadata": {
      "tmdb_id": "12345",
      "title": "Movie Title",
      "media_type": "movie"
    }
  }
  ```

### File Uploads
- **Storage**: Maintain current Supabase integration
- **Security**: Preserve current validation and constraints
- **Data Structure**:
  ```json
  {
    "source": "upload",
    "url": "https://storage.supabase.com/...",
    "metadata": {
      "path": "events/filename.jpg",
      "uploaded_at": "2025-01-XX",
      "file_size": 1024000
    }
  }
  ```

## User Experience Flow

### New Event Creation
1. User starts creating new event
2. System automatically assigns random default image
3. Event form shows default image with option to change
4. User can click "Change Image" to open image picker
5. Image picker shows tabs: Default Images, Unsplash, Upload
6. User selection updates preview immediately

### Event Editing
1. User opens edit form for existing event
2. Current image displays with "Change Image" option
3. Same image picker interface as creation
4. Preserves current image if user cancels

### Image Picker Interface
1. **Default Images Tab**: Grid of 8 default options
2. **Unsplash Tab**: Current search and selection interface
3. **Upload Tab**: Current file upload interface  
4. Clear visual feedback for selected image
5. Consistent "Select" action across all tabs

## Implementation Phases

### Phase 1: Default Images (Weeks 1-2)
- Create and optimize default image assets
- Implement default selection logic
- Update form components to handle defaults
- Add default images tab to image picker
- Test default image functionality

### Phase 2: Data Standardization (Weeks 3-4)  
- Design and implement unified data structure
- Update form handling logic
- Migrate image selection to use new format
- Maintain backward compatibility
- Test with all image sources

### Phase 3: Database Migration (Week 5)
- Create migration script for existing data
- Remove `cover_image_url` field
- Update all model references
- Test data integrity and performance

### Phase 4: Code Cleanup (Week 6)
- Remove obsolete dual field logic
- Simplify templates and components
- Update display logic across application
- Performance optimization and testing

## Success Criteria
1. All new events automatically have appealing default images
2. No data redundancy - single source of truth for image data
3. Consistent metadata structure across all image sources
4. Simplified codebase with reduced complexity
5. Backward compatibility maintained during transition
6. No performance regression
7. All image attributions properly maintained
8. User experience improved with better default state

## Technical Constraints
- Must maintain Unsplash API attribution requirements
- Must preserve existing uploaded images
- Must not break existing event display functionality  
- Must maintain current security and validation
- Should not require changes to core event functionality

## Image Functionality Audit & Testing Requirements

### Critical Functionality Audit

#### 1. Image Upload System (Supabase)
**Requirements:**
- Access token must be properly passed from session to LiveView assigns
- Upload hook must receive `data-access-token` attribute
- File validation (type, size) must work correctly
- Upload progress and error handling must function
- Successful uploads must update form state immediately

**Testing Points:**
- Session contains `access_token` after authentication
- LiveView assigns include `:supabase_access_token` from session
- Template renders `data-access-token={@supabase_access_token}` correctly
- JavaScript hook receives and uses access token
- Upload success triggers `image_uploaded` event with correct data
- Upload failures trigger `image_upload_error` event

#### 2. Image Search System (Unsplash + TMDB)
**Requirements:**
- SearchService.unified_search/2 must return combined results
- Results must include both Unsplash and TMDB data
- Search pagination must work correctly
- Image selection must update form with proper metadata
- API errors must be handled gracefully

**Testing Points:**
- SearchService.unified_search returns `%{unsplash: [], tmdb: []}` structure
- Search form submission triggers `search_unsplash` event
- Search results display in proper format for both sources
- Image selection triggers `select_image` event with correct ID
- Selected images update `cover_image_url` and `external_image_data`
- API timeouts and errors display user-friendly messages

#### 3. Default Image System
**Requirements:**
- Default images must be served from correct path
- Random selection must work on new event creation
- Default image metadata must follow standard structure
- Selection from defaults tab must update form correctly

**Testing Points:**
- Default images exist in `/priv/static/images/events/defaults/`
- DefaultImageService functions exist and return correct data
- Mount assigns random default image to new events
- Default image selection updates form state
- Default image data follows standardized metadata format

#### 4. Form State Management
**Requirements:**
- Form data must persist across image selections
- Image changes must trigger changeset validation
- External image data must be properly encoded/decoded
- Form submission must include all image metadata

**Testing Points:**
- Image selection preserves other form field values
- Changeset updates trigger form re-validation
- `external_image_data` JSON encoding/decoding works correctly
- Form submission includes both `cover_image_url` and `external_image_data`
- Validation errors display correctly when image is missing

### Automated Testing Strategy

#### Unit Tests
```elixir
# test/eventasaurus_web/live/event_live/new_test.exs
defmodule EventasaurusWeb.EventLive.NewTest do
  use EventasaurusWeb.ConnCase, async: true
  import Phoenix.LiveViewTest

  describe "mount/3" do
    test "assigns supabase_access_token from session" do
      session = %{"access_token" => "test_token"}
      {:ok, _view, html} = live_with_session(conn, ~p"/events/new", session)
      assert html =~ "data-access-token=\"test_token\""
    end

    test "assigns random default image on mount" do
      # Test that mount assigns a default image
    end
  end

  describe "image upload functionality" do
    test "image_uploaded event updates form correctly" do
      # Test upload success handling
    end

    test "image_upload_error event displays error" do
      # Test upload error handling
    end
  end

  describe "image search functionality" do
    test "search_unsplash event triggers unified search" do
      # Test search integration
    end

    test "select_image event updates form with correct data" do
      # Test image selection
    end
  end
end
```

#### Integration Tests
```elixir
# test/eventasaurus_web/integration/image_functionality_test.exs
defmodule EventasaurusWeb.Integration.ImageFunctionalityTest do
  use EventasaurusWeb.ConnCase
  import Phoenix.LiveViewTest

  describe "image upload integration" do
    test "complete upload workflow" do
      # Test full upload from file selection to form update
    end
  end

  describe "image search integration" do
    test "unsplash search and selection workflow" do
      # Test search → results → selection → form update
    end

    test "tmdb search and selection workflow" do
      # Test TMDB-specific workflow
    end
  end

  describe "default image integration" do
    test "default image assignment and override workflow" do
      # Test default → override with search/upload
    end
  end
end
```

#### End-to-End Tests (Browser Tests)
```elixir
# test/eventasaurus_web/e2e/event_creation_test.exs
defmodule EventasaurusWeb.E2E.EventCreationTest do
  use EventasaurusWeb.FeatureCase

  test "user can create event with uploaded image" do
    # Full browser test for upload workflow
  end

  test "user can create event with searched image" do
    # Full browser test for search workflow
  end

  test "user can create event with default image" do
    # Full browser test for default workflow
  end
end
```

### Manual Testing Checklist

#### Image Upload Testing
- [ ] Navigate to new event form
- [ ] Open image picker → Upload tab
- [ ] Verify file input has `data-access-token` attribute
- [ ] Select image file and verify upload progress
- [ ] Confirm upload success updates form preview
- [ ] Test upload failure scenarios (large file, wrong type)
- [ ] Verify uploaded image persists in created event

#### Image Search Testing
- [ ] Navigate to new event form
- [ ] Open image picker → Unsplash/TMDB tabs
- [ ] Enter search query and verify results display
- [ ] Test empty search query handling
- [ ] Select image and verify form updates
- [ ] Test pagination with "Load More" button
- [ ] Verify attribution data is preserved
- [ ] Test API timeout/error scenarios

#### Default Image Testing
- [ ] Navigate to new event form
- [ ] Verify random default image is assigned on load
- [ ] Open image picker → Default Images tab
- [ ] Verify all 8 default images display correctly
- [ ] Select different default and verify form updates
- [ ] Verify default metadata structure is correct

#### Form Integration Testing
- [ ] Test image selection preserves other form data
- [ ] Test form validation with/without images
- [ ] Test form submission with each image type
- [ ] Verify created event displays correct image
- [ ] Test edit form preserves current image

### Performance Monitoring
- Monitor search API response times
- Track upload success/failure rates
- Monitor image loading performance
- Track form submission times with images

### Error Handling Verification
- Network timeout scenarios
- Invalid API responses  
- Upload authentication failures
- File size/type validation errors
- Search service unavailability

This audit ensures that the image refactor maintains robust functionality and prevents silent failures like we experienced with missing access tokens and incorrect search service calls.

## Acceptance Criteria
- [ ] 8 high-quality default images implemented
- [ ] Random default assignment on event creation  
- [ ] Unified image metadata structure implemented
- [ ] Database migration successfully removes redundancy
- [ ] All image sources work correctly with new structure
- [ ] No broken images or missing attributions
- [ ] Performance metrics maintained or improved
- [ ] All existing events continue to display correctly
- [ ] Form complexity reduced by at least 30%
- [ ] Code coverage maintained above 90% 