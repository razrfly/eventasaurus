# Eventasaurus Theming System - Product Requirements Document

## 1. Executive Summary

### Vision
Build a comprehensive theming system for Eventasaurus public event pages that allows event organizers to customize the visual appearance of their event pages using predefined themes and custom styling options, similar to Lu.ma's theming capabilities.

### Goals
- Provide 7 beautifully designed default themes inspired by Lu.ma's approach
- Enable theme customization through color, typography, and layout options
- Maintain excellent performance and accessibility across all themes
- Create an intuitive theme selection and customization experience
- Support both light and dark mode variations for applicable themes

### Success Metrics
- Event organizers can successfully select and customize themes in under 2 minutes
- All themes pass WCAG 2.1 AA accessibility standards
- Theme switching has minimal performance impact (< 100ms)
- 90%+ user satisfaction with theme variety and customization options

## 2. User Stories

### Primary Users: Event Organizers

**Epic: Theme Selection**
- As an event organizer, I want to choose from multiple pre-designed themes so that my event page matches my brand or event style
- As an event organizer, I want to preview themes before applying them so that I can see how they'll look
- As an event organizer, I want to switch themes easily so that I can experiment with different looks

**Epic: Theme Customization**
- As an event organizer, I want to customize colors within a theme so that it matches my specific brand colors
- As an event organizer, I want to choose different fonts so that the typography reflects my event's personality
- As an event organizer, I want to toggle between light and dark modes so that my event appeals to different preferences

**Epic: Theme Management**
- As an event organizer, I want to reset customizations to default so that I can start over if needed
- As an event organizer, I want my theme choices to be saved automatically so that I don't lose my work
- As an event organizer, I want to copy themes between my events so that I can maintain brand consistency

### Secondary Users: Event Attendees

**Epic: Theme Experience**
- As an event attendee, I want the event page to load quickly regardless of theme so that I can register without delays
- As an event attendee, I want the page to be readable and accessible so that I can understand event details clearly
- As an event attendee, I want the registration process to work consistently across all themes

## 3. Functional Requirements

### 3.1 Theme System Core

**REQ-3.1.1: Default Themes**
- System MUST provide exactly 7 predefined themes:
  1. **Minimal** - Clean, modern design with lots of white space (current default)
  2. **Cosmic** - Space/galaxy themed with dark backgrounds and cosmic imagery
  3. **Velocity** - Tech/futuristic with gradients and sharp geometric elements
  4. **Retro** - Vintage/80s aesthetic with emoji support and vibrant colors
  5. **Celebration** - Party/confetti themed with bright, festive colors
  6. **Nature** - Organic patterns with earth tones and natural textures
  7. **Professional** - Corporate/business focused with muted, sophisticated colors

**REQ-3.1.2: Theme Data Structure**
- Theme field MUST be an Ecto enum with values: [:minimal, :cosmic, :velocity, :retro, :celebration, :nature, :professional]
- Theme customizations MUST be stored as JSONB with structure:
  ```json
  {
    "colors": {
      "primary": "#hex_color",
      "secondary": "#hex_color",
      "accent": "#hex_color",
      "background": "#hex_color",
      "text": "#hex_color"
    },
    "typography": {
      "font_family": "font_name",
      "heading_weight": "weight_value",
      "body_size": "size_value"
    },
    "layout": {
      "border_radius": "radius_value",
      "shadow_style": "style_name"
    },
    "mode": "light|dark"
  }
  ```

**REQ-3.1.3: Theme Application**
- Themes MUST be applied only to public event pages (PublicEventLive)
- Theme CSS MUST use CSS custom properties for easy customization
- System MUST gracefully fallback to 'minimal' theme if theme data is corrupted

### 3.2 Theme Selection Interface

**REQ-3.2.1: Theme Picker Component**
- MUST display visual thumbnails/previews for each of the 7 themes
- MUST allow single-click theme selection
- MUST provide live preview capability
- MUST be integrated into both event creation and edit forms
- MUST show current selected theme clearly

**REQ-3.2.2: Theme Preview**
- MUST allow real-time preview of theme changes without saving
- MUST show preview in a modal or separate view
- MUST include key event page elements in preview (title, description, registration button)

### 3.3 Theme Customization Interface

**REQ-3.3.1: Color Customization**
- MUST provide color pickers for: primary, secondary, accent, background, text colors
- MUST validate color contrast for accessibility
- MUST show real-time preview of color changes
- MUST provide preset color palettes for each theme

**REQ-3.3.2: Typography Customization**
- MUST offer font family selection from curated list (Inter, Playfair Display, Roboto, etc.)
- MUST allow heading weight adjustment (400, 500, 600, 700)
- MUST allow body text size adjustment (14px, 16px, 18px)

**REQ-3.3.3: Layout Customization**
- MUST allow border radius adjustment (sharp, rounded, very rounded)
- MUST allow shadow style selection (none, soft, pronounced)
- MUST provide light/dark mode toggle where applicable

### 3.4 Data Management

**REQ-3.4.1: Theme Persistence**
- Theme selection MUST be saved immediately upon selection
- Customizations MUST be saved automatically (debounced)
- MUST maintain theme data integrity during event updates

**REQ-3.4.2: Migration & Compatibility**
- Existing events MUST default to 'minimal' theme
- MUST handle theme enum additions gracefully
- MUST provide migration path for future theme schema changes

## 4. Technical Requirements

### 4.1 Database Schema

**REQ-4.1.1: Event Model Updates**
```elixir
# Add to Event schema
field :theme, Ecto.Enum, 
  values: [:minimal, :cosmic, :velocity, :retro, :celebration, :nature, :professional],
  default: :minimal
field :theme_customizations, :map, default: %{}
```

**REQ-4.1.2: Migration Requirements**
- MUST add theme fields with proper defaults
- MUST update existing events to use 'minimal' theme
- MUST include proper indexes if needed for performance

### 4.2 CSS Architecture

**REQ-4.2.1: Theme CSS Structure**
```
assets/css/
├── themes/
│   ├── base.css              # Shared theme foundation
│   ├── minimal.css           # Minimal theme
│   ├── cosmic.css            # Cosmic theme
│   ├── velocity.css          # Velocity theme
│   ├── retro.css             # Retro theme
│   ├── celebration.css       # Celebration theme
│   ├── nature.css            # Nature theme
│   └── professional.css      # Professional theme
└── public.css                # Base public styles
```

**REQ-4.2.2: CSS Implementation Standards**
- MUST use CSS custom properties for themeable values
- MUST follow BEM or similar CSS methodology
- MUST ensure themes don't conflict with admin/dashboard styles
- MUST optimize for Core Web Vitals performance

### 4.3 Context Architecture

**REQ-4.3.1: Themes Context**
```elixir
defmodule EventasaurusApp.Themes do
  # Theme validation and utilities
  def valid_theme?(theme)
  def merge_customizations(base_theme, customizations)
  def validate_customizations(customizations)
  def get_theme_css_class(theme)
  def get_default_customizations(theme)
end
```

**REQ-4.3.2: Events Context Updates**
- MUST add theme-related functions to Events context
- MUST validate theme data in changesets
- MUST handle theme migration utilities

## 5. Non-Functional Requirements

### 5.1 Performance
- Theme CSS loading MUST not increase page load time by more than 100ms
- Theme switching MUST be instantaneous (<50ms perceived)
- CSS bundle size increase MUST be less than 50KB total for all themes

### 5.2 Accessibility
- All themes MUST pass WCAG 2.1 AA color contrast requirements
- Theme customizations MUST validate color contrast automatically
- All themes MUST work with screen readers
- All themes MUST support keyboard navigation

### 5.3 Browser Support
- MUST support CSS custom properties (IE11+ not required)
- MUST work on mobile devices (iOS Safari, Chrome Mobile)
- MUST degrade gracefully on older browsers

### 5.4 Security
- Theme customizations MUST be sanitized against XSS
- CSS injection MUST be prevented
- Theme data MUST be validated server-side

## 6. Design Specifications

### 6.1 Theme Design Guidelines

**Minimal Theme (Default)**
- Colors: Black text on white background, minimal accent colors
- Typography: Inter font family, clean and readable
- Layout: Generous white space, subtle shadows

**Cosmic Theme**
- Colors: Dark purple/black backgrounds, bright accent colors (#6366f1, #8b5cf6)
- Typography: Futuristic fonts, slightly larger headings
- Layout: Gradient backgrounds, space-themed imagery, glowing effects

**Velocity Theme**
- Colors: Tech-inspired gradients, electric blues and cyans
- Typography: Sans-serif, bold headings
- Layout: Sharp edges, geometric patterns, dynamic gradients

**Retro Theme**
- Colors: Vibrant 80s palette (pinks, purples, yellows)
- Typography: Rounded fonts, emoji support emphasized
- Layout: Retro patterns, fun borders, nostalgic elements

**Celebration Theme**
- Colors: Bright, festive colors (reds, yellows, greens)
- Typography: Playful fonts, varied weights
- Layout: Confetti patterns, party elements, animated details

**Nature Theme**
- Colors: Earth tones (greens, browns, natural colors)
- Typography: Organic, readable fonts
- Layout: Natural patterns, organic shapes, sustainable feel

**Professional Theme**
- Colors: Corporate colors (navy, gray, white, subtle accents)
- Typography: Professional fonts, consistent hierarchy
- Layout: Clean lines, minimal decoration, business-focused

### 6.2 Responsive Design
- All themes MUST work on mobile (320px+) and desktop (1024px+)
- Theme elements MUST scale appropriately
- Mobile theme experience MUST be optimized for touch

## 7. Implementation Phases

### Phase 1: Foundation (Weeks 1-2)
- Database schema updates
- Basic theme enum implementation
- CSS architecture setup
- Theme context creation

### Phase 2: Core Themes (Weeks 3-4)
- Implement all 7 default themes
- Create theme application system
- Basic theme selection UI

### Phase 3: Customization (Weeks 5-6)
- Build theme customization interface
- Implement color/typography/layout options
- Add preview functionality

### Phase 4: Polish & Performance (Week 7)
- Performance optimization
- Accessibility improvements
- Testing and bug fixes

## 8. Testing Requirements

### 8.1 Unit Testing
- Theme validation functions
- Theme merging logic
- CSS class generation
- Database operations

### 8.2 Integration Testing
- Theme selection workflow
- Theme customization workflow
- Public page theme application
- Performance benchmarks

### 8.3 Accessibility Testing
- Color contrast validation
- Screen reader compatibility
- Keyboard navigation
- WCAG compliance verification

## 9. Future Considerations

### 9.1 Advanced Features (Post-MVP)
- Custom theme creation and sharing
- Seasonal theme variations
- Brand integration (logo color extraction)
- Theme marketplace
- A/B testing for themes

### 9.2 Scalability
- Theme caching strategies
- CDN integration for theme assets
- Theme versioning system
- Multi-tenant theme customizations

## 10. Success Criteria

### Launch Criteria
- All 7 themes implemented and tested
- Theme selection works in event creation/edit flows
- Basic customization options functional
- Performance targets met
- Accessibility standards met

### Post-Launch Success Metrics
- 70%+ of new events use non-default themes within 30 days
- Average theme customization session < 2 minutes
- Zero critical accessibility issues reported
- Page performance scores maintain current levels

## 11. Risks & Mitigation

### Technical Risks
- **CSS conflicts**: Mitigate with proper CSS scope and testing
- **Performance degradation**: Mitigate with lazy loading and optimization
- **Browser compatibility**: Mitigate with progressive enhancement

### UX Risks
- **Theme overwhelming users**: Mitigate with good defaults and clear guidance
- **Customization complexity**: Mitigate with progressive disclosure
- **Preview accuracy**: Mitigate with thorough testing across devices

### Business Risks
- **Low adoption**: Mitigate with user research and feedback loops
- **Maintenance overhead**: Mitigate with good documentation and testing 