# 📅 Event Date Polling — Complete Feature PRD

**Version:** 1.0  
**Status:** Ready for implementation  
**Reference:** UX behavior similar to [Rallly Poll Example](https://app.rallly.co/invite/zjKS5Z7wNcOz)

---

## 1. Overview

This feature enables organizers to create an event in `"polling"` mode, where participants vote on a set of possible dates. Once a date is finalized, the event transitions to `"confirmed"` state and behaves like a standard event.

The user experience is modeled after Rallly but tailored to our Supabase + Phoenix app stack.

---

## 2. Event States

Events have a `state` field (`string`):

- `"confirmed"` – standard default event with fixed date
- `"polling"` – collecting votes on candidate dates

> Validation: `start_at` and `end_at` are still required for all events.
- In `"polling"` mode, these represent the **range of possible dates** (not the final event date).
- The UI will need to reflect that `start_at` and `end_at` are treated as a candidate range, not as confirmed event boundaries.

---

## 3. Feature Behavior

### 3.1 Organizer Flow

- While creating an event, organizer chooses "Let attendees vote on the date."
- System sets `event.state = "polling"`
- `start_at` and `end_at` define the poll range
- One `event_date_option` is created for each date in that range
- Organizer can:
  - Monitor vote counts
  - View a **heatmap** summary of responses
  - Finalize a date (updates `event.start_at`, sets `state = "confirmed"`)

---

### 3.2 Participant Flow

- Participant sees list of dates and selects one of:
  - ✅ Yes
  - 🤷 If need be
  - ❌ No
- They must **submit name + email** to complete voting:
  - If email is new, create an unconfirmed Supabase user
  - If email exists, prompt for login but preserve vote data
- After submitting:
  - Optionally show the **heatmap of aggregated results**
  - Show a list of all participants who've registered or voted

---

### 3.3 Heatmap (Voting Summary)

- Display to organizers always
- Optionally visible to participants **after submitting votes**
- For each date, show:
  - Total Yes / If need be / No counts
  - Intensity-based visual indicator (e.g., green > yellow > red)

---

### 3.4 Participant List

- Display list of all users who've registered or voted for the event
- Show:
  - Name
  - Vote status (optional)
- This promotes transparency and social proof

---

## 4. Database Models

### `event_date_polls`

| Field | Type | Notes |
|-------|------|-------|
| id | integer | Primary key |
| event_id | FK | One poll per event |
| created_by_id | FK | Organizer who created the poll |
| voting_deadline | utc_datetime | Optional — soft deadline for participants |
| finalized_date | date | Date selected from poll (copied to `event.start_at`) |

---

### `event_date_options`

| Field | Type | Notes |
|-------|------|-------|
| id | integer | |
| event_date_poll_id | FK | |
| date | date | Each proposed date |

---

### `event_date_votes`

| Field | Type | Notes |
|-------|------|-------|
| id | integer | |
| event_date_option_id | FK | |
| user_id | FK | Supabase user |
| vote_type | enum | `:yes`, `:if_need_be`, `:no` |

- Unique constraint on `(event_date_option_id, user_id)`
- No comments or suggested times

---

## 5. User Identity Handling

- Participants **do not need to log in** to vote
- But must enter name and email before vote submission
- Supabase `users` are created if necessary (unconfirmed)
- Vote selections are preserved in the browser (in-memory or local storage)
- If email is already registered:
  - Show soft prompt: *"Looks like you've already joined us. Please log in to confirm your votes."*
  - Ensure no data is lost during this flow

---

## 6. Validations & Rules

- `start_at` and `end_at` are **always required**
- Voting only allowed if `event.state == "polling"`
- A user may vote only once per date
- Finalizing the poll:
  - Updates `event.start_at` with selected date
  - Sets `event.state = "confirmed"`
  - Optionally archives vote data

---

## 7. Tests

- Polling event auto-generates date options from range
- Voting restricted to polling state
- Vote uniqueness per user per date enforced
- Organizer finalizing the poll updates core event record
- Existing user email during submission prompts login without data loss
- Heatmap correctly summarizes vote tallies

---

## 8. Visual Reference

[View a Rallly example here](https://app.rallly.co/invite/zjKS5Z7wNcOz)

This is the core inspiration for:
- Voting interaction
- Participant list display
- Heatmap summary of results

---

# ✅ Frictionless Anonymous Voting PRD

**Version:** 1.0
**Status:** Ready for implementation
**Objective:** Enable anonymous users to cast votes for event dates with minimal friction, using the same model as our successful registration flow. No schema changes, no added complexity.

---

## 1. Overview

Anonymous users can vote on event date options without logging in. They are asked for their name + email after selecting a vote, at which point their vote is saved to the backend using the same flow as our event registration system.

* No authentication required
* No new user schema fields
* No use of browser storage or JavaScript state
* All temporary data is held in LiveView assigns

---

## 2. Flow Summary

### 🧑 Anonymous User

1. Clicks a vote button (Yes / If need be / No)
2. Vote stored in `socket.assigns.pending_vote`
3. Modal opens asking for name + email
4. User submits form
5. Backend:

   * Finds or creates user by email
   * Records vote in database
6. UI updates to show success
7. (Optional) Sends verification email

---

## 3. Data Handling

### Temporary Storage

* Vote stored in LiveView memory:

  * assign `pending_vote` to socket
  * This is not persisted until the user submits their email

### Backend Behavior

* Reuses existing `register_user_for_event` pattern
* No changes to `users` schema
* Users are marked unconfirmed until they verify by email (as today)

---

## 4. UI Implementation

* On vote button click:

  * Store vote in assigns
  * Show modal requesting name + email

* On form submit:

  * Call context function to find/create user and record vote
  * Dismiss modal, flash success
  * Reload vote data for display

---

## 5. Backend Logic

* Mirror existing `register_user_for_event`
* Add new `register_voter_and_cast_vote` context function:

  * Gets or creates user by email
  * Casts vote using event date option and vote type
  * Optionally sends verification email

---

## 6. Modal Form

* Simple form asking for name and email
* Reuse styling and structure from registration modal
* Submit triggers vote + user creation logic

---

## 7. Edge Case Handling

### ✅ Email Already Exists

* Existing verified user → Vote saved
* Existing unverified user → Vote saved, email resent
* Repeated email → Overwrite or reject (decide behavior)

### ✅ User Already Voted

* Allow vote to be changed (overwrite existing)

---

## 8. Why This Works

### UX

* No friction
* Familiar, proven flow
* Vote now, confirm later

### Technical

* Reuses patterns
* No schema changes
* No browser/local storage
* No added JS state

### Business

* Higher conversion rate
* Grow verified user base
* Easy to support and debug

---

## 9. Success Criteria

* Anonymous users can vote with only name + email
* Existing flow is reused, no schema changes
* Users can vote only once per date
* Users with prior votes can change them
* Unverified users can verify later via email
* No vote data lost in edge cases 