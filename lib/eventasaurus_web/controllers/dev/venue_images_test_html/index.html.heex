<div class="min-h-screen bg-gray-50 py-8">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900">Venue Image Aggregation System</h1>
      <p class="mt-2 text-gray-600">
        Development testing and monitoring for multi-provider venue image enrichment
      </p>
    </div>

    <!-- System Status -->
    <div class="mb-8 p-6 bg-white rounded-lg shadow">
      <h2 class="text-xl font-semibold mb-4">System Status</h2>
      <div class="grid grid-cols-2 md:grid-cols-5 gap-4">
        <div>
          <span class="text-sm font-medium text-gray-700">Google Places:</span>
          <span class={
            "ml-2 px-3 py-1 rounded-full text-sm font-medium #{status_badge_class(@system_status.api_keys.google_places)}"
          }>
            <%= status_text(@system_status.api_keys.google_places) %>
          </span>
        </div>
        <div>
          <span class="text-sm font-medium text-gray-700">Foursquare:</span>
          <span class={
            "ml-2 px-3 py-1 rounded-full text-sm font-medium #{status_badge_class(@system_status.api_keys.foursquare)}"
          }>
            <%= status_text(@system_status.api_keys.foursquare) %>
          </span>
        </div>
        <div>
          <span class="text-sm font-medium text-gray-700">HERE:</span>
          <span class={
            "ml-2 px-3 py-1 rounded-full text-sm font-medium #{status_badge_class(@system_status.api_keys.here)}"
          }>
            <%= status_text(@system_status.api_keys.here) %>
          </span>
        </div>
        <div>
          <span class="text-sm font-medium text-gray-700">Geoapify:</span>
          <span class={
            "ml-2 px-3 py-1 rounded-full text-sm font-medium #{status_badge_class(@system_status.api_keys.geoapify)}"
          }>
            <%= status_text(@system_status.api_keys.geoapify) %>
          </span>
        </div>
        <div>
          <span class="text-sm font-medium text-gray-700">Unsplash:</span>
          <span class={
            "ml-2 px-3 py-1 rounded-full text-sm font-medium #{status_badge_class(@system_status.api_keys.unsplash)}"
          }>
            <%= status_text(@system_status.api_keys.unsplash) %>
          </span>
        </div>
      </div>

      <div class="mt-4 grid grid-cols-2 md:grid-cols-3 gap-4 text-sm">
        <div>
          <span class="font-medium text-gray-700">Rate Limiter:</span>
          <span class={
            "ml-2 px-2 py-1 rounded text-xs #{status_badge_class(@system_status.rate_limiter_running)}"
          }>
            <%= if @system_status.rate_limiter_running, do: "Running", else: "Stopped" %>
          </span>
        </div>
        <div>
          <span class="font-medium text-gray-700">Oban Queue Depth:</span>
          <span class="ml-2 text-gray-600"><%= @system_status.oban_queue_depth %> jobs</span>
        </div>
        <div>
          <span class="font-medium text-gray-700">Providers Enabled:</span>
          <span class="ml-2 text-gray-600"><%= @system_status.providers_enabled %></span>
        </div>
      </div>
    </div>

    <!-- Global Statistics -->
    <div class="mb-8 p-6 bg-gradient-to-r from-indigo-600 to-indigo-700 text-white rounded-lg shadow">
      <h2 class="text-xl font-semibold mb-4">Global Statistics</h2>
      <div class="grid grid-cols-2 md:grid-cols-4 gap-6">
        <div>
          <div class="text-3xl font-bold"><%= format_number(@global_stats.total_venues) %></div>
          <div class="text-sm text-indigo-100">Total Venues</div>
        </div>
        <div>
          <div class="text-3xl font-bold"><%= format_number(@global_stats.enriched_venues) %></div>
          <div class="text-sm text-indigo-100">Enriched Venues</div>
        </div>
        <div>
          <div class="text-3xl font-bold"><%= format_number(@global_stats.total_images) %></div>
          <div class="text-sm text-indigo-100">Total Images</div>
        </div>
        <div>
          <div class="text-3xl font-bold"><%= format_cost(@global_stats.total_cost) %></div>
          <div class="text-sm text-indigo-100">Total Cost</div>
        </div>
      </div>

      <div class="mt-6 pt-6 border-t border-indigo-500 grid grid-cols-2 md:grid-cols-3 gap-4 text-sm">
        <div>
          <div class="text-lg font-semibold"><%= Float.round(@global_stats.avg_images_per_venue, 1) %></div>
          <div class="text-xs text-indigo-100">Avg Images/Venue</div>
        </div>
        <div>
          <div class="text-lg font-semibold"><%= format_cost(@global_stats.avg_cost_per_venue) %></div>
          <div class="text-xs text-indigo-100">Avg Cost/Venue</div>
        </div>
        <div>
          <div class="text-lg font-semibold"><%= format_number(@global_stats.needs_enrichment) %></div>
          <div class="text-xs text-indigo-100">Needs Enrichment</div>
        </div>
      </div>
    </div>

    <!-- Provider Statistics -->
    <div class="mb-8 bg-white rounded-lg shadow overflow-hidden">
      <div class="px-6 py-4 bg-gray-50 border-b">
        <h2 class="text-xl font-semibold">Provider Statistics</h2>
      </div>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Provider
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Priority
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Images
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Success Rate
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Cost/Image
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Total Cost
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Rate Limits
              </th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
            <%= for provider <- @provider_stats do %>
              <tr>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                  <%= format_provider_name(provider.name) %>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class={"px-2 py-1 text-xs rounded #{status_badge_class(provider.is_active)}"}>
                    <%= status_text(provider.is_active) %>
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  <%= provider.priority %>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  <%= format_number(provider.images_contributed) %>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  <%= format_percentage(provider.success_rate) %>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  <%= format_cost(provider.cost_per_image) %>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  <%= format_cost(provider.total_cost) %>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-xs text-gray-500">
                  <div>sec: <%= provider.rate_limit_stats.last_second %></div>
                  <div>min: <%= provider.rate_limit_stats.last_minute %></div>
                  <div>hr: <%= provider.rate_limit_stats.last_hour %></div>
                </td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>
    </div>


    <!-- Staleness Monitor -->
    <div class="mb-8 bg-white rounded-lg shadow p-6">
      <h2 class="text-xl font-semibold mb-4">Staleness Monitor</h2>
      <div class="grid grid-cols-2 md:grid-cols-4 gap-6">
        <div class="p-4 bg-red-50 border-l-4 border-red-400 rounded">
          <div class="text-3xl font-bold text-red-900">
            <%= format_number(@staleness_monitor.stale_venues) %>
          </div>
          <div class="text-sm text-red-700">Stale Venues (>30 days)</div>
        </div>
        <div class="p-4 bg-yellow-50 border-l-4 border-yellow-400 rounded">
          <div class="text-3xl font-bold text-yellow-900">
            <%= format_number(@staleness_monitor.upcoming_stale) %>
          </div>
          <div class="text-sm text-yellow-700">Upcoming Stale (25-30 days)</div>
        </div>
        <div class="p-4 bg-orange-50 border-l-4 border-orange-400 rounded">
          <div class="text-3xl font-bold text-orange-900">
            <%= format_number(@staleness_monitor.never_enriched) %>
          </div>
          <div class="text-sm text-orange-700">Never Enriched</div>
        </div>
        <div class="p-4 bg-blue-50 border-l-4 border-blue-400 rounded">
          <div class="text-lg font-bold text-blue-900">
            <%= format_duration(@staleness_monitor.time_until_cron) %>
          </div>
          <div class="text-sm text-blue-700">Until Next Cron (4 AM UTC)</div>
        </div>
      </div>
    </div>

    <!-- Manual Testing UI -->
    <div class="mb-8 bg-white rounded-lg shadow p-6">
      <h2 class="text-xl font-semibold mb-4">Manual Testing Controls</h2>

      <!-- Venue Selector -->
      <div class="mb-6">
        <label for="venue-select" class="block text-sm font-medium text-gray-700 mb-2">
          Select Test Venue
        </label>
        <select
          id="venue-select"
          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
        >
          <option value="">-- Choose a venue --</option>
          <%= for venue <- @testable_venues do %>
            <option value={venue.id} data-provider-ids={Jason.encode!(venue.provider_ids)}>
              [#<%= venue.id %>] <%= venue.name %>
              <%= if venue.city, do: "(#{venue.city})" %>
              - <%= Enum.count(venue.provider_ids) %> providers
              <%= if venue.has_images, do: "✓ Has images", else: "" %>
            </option>
          <% end %>
        </select>
      </div>

      <!-- Provider ID Editor -->
      <div id="provider-id-editor" class="mb-6 hidden">
        <h3 class="text-md font-medium text-gray-900 mb-3">Provider IDs</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">HERE ID</label>
            <input
              type="text"
              id="provider-here"
              placeholder="here:pds:place:..."
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-sm font-mono"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Geoapify ID</label>
            <input
              type="text"
              id="provider-geoapify"
              placeholder="51abc123..."
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-sm font-mono"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Foursquare ID</label>
            <input
              type="text"
              id="provider-foursquare"
              placeholder="4a1b2c3d..."
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-sm font-mono"
            />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Google Places ID</label>
            <input
              type="text"
              id="provider-google_places"
              placeholder="ChIJxyz..."
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 text-sm font-mono"
            />
          </div>
        </div>
        <div class="mt-4">
          <button
            id="save-provider-ids"
            class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500"
          >
            Save Provider IDs
          </button>
        </div>
      </div>

      <!-- Test Buttons -->
      <div id="test-buttons" class="mb-6 hidden">
        <h3 class="text-md font-medium text-gray-900 mb-3">Test Image Fetching</h3>
        <div class="flex flex-wrap gap-3">
          <button
            id="test-all-providers"
            class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500"
          >
            🚀 Fetch Images from All Providers
          </button>
          <button
            data-provider="here"
            class="test-provider px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            Test HERE Images
          </button>
          <button
            data-provider="geoapify"
            class="test-provider px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500"
          >
            Test Geoapify Images
          </button>
          <button
            data-provider="foursquare"
            class="test-provider px-4 py-2 bg-pink-600 text-white rounded-md hover:bg-pink-700 focus:outline-none focus:ring-2 focus:ring-pink-500"
          >
            Test Foursquare Images
          </button>
          <button
            data-provider="google_places"
            class="test-provider px-4 py-2 bg-orange-600 text-white rounded-md hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-orange-500"
          >
            Test Google Places Images
          </button>
        </div>
      </div>

      <!-- Real-Time Results Display -->
      <div id="test-results" class="hidden">
        <h3 class="text-md font-medium text-gray-900 mb-3">Test Results</h3>

        <!-- Summary Stats -->
        <div id="test-summary" class="mb-4 p-4 bg-gray-50 rounded-lg hidden">
          <div class="grid grid-cols-3 gap-4 text-center">
            <div>
              <div class="text-2xl font-bold text-gray-900" id="summary-images">0</div>
              <div class="text-sm text-gray-600">Total Images</div>
            </div>
            <div>
              <div class="text-2xl font-bold text-gray-900" id="summary-cost">$0.0000</div>
              <div class="text-sm text-gray-600">Total Cost</div>
            </div>
            <div>
              <div class="text-2xl font-bold text-gray-900" id="summary-duration">0ms</div>
              <div class="text-sm text-gray-600">Duration</div>
            </div>
          </div>
        </div>

        <!-- Provider Results -->
        <div id="provider-results" class="space-y-4"></div>
      </div>
    </div>

    <!-- Clear Cache Section -->
    <div class="mb-8 bg-white rounded-lg shadow p-6">
      <h2 class="text-xl font-semibold mb-4">🧹 Clear Image Cache</h2>
      <p class="text-sm text-gray-600 mb-4">
        Clear cached venue images and enrichment metadata for testing purposes.
        This is useful when you need to re-enrich venues with fresh data (e.g., after rotating API keys).
      </p>

      <!-- City Filter -->
      <div class="mb-4">
        <label for="clear-cache-city" class="block text-sm font-medium text-gray-700 mb-2">
          Optional: Filter by City (leave empty to clear all)
        </label>
        <select
          id="clear-cache-city"
          class="w-full md:w-96 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500"
        >
          <option value="">-- All Cities --</option>
          <%= for city <- @active_cities do %>
            <option value={city.slug}><%= city.name %></option>
          <% end %>
        </select>
      </div>

      <!-- Clear Button -->
      <button
        id="clear-cache-btn"
        class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500"
      >
        🗑️ Clear Image Cache
      </button>

      <!-- Clear Cache Result -->
      <div id="clear-cache-result" class="hidden mt-4"></div>
    </div>

    <!-- Sample Enriched Venues -->
    <%= if length(@sample_venues) > 0 do %>
      <div class="mb-8">
        <h2 class="text-2xl font-semibold mb-4">Recently Enriched Venues</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <%= for venue_data <- @sample_venues do %>
            <div class="bg-white rounded-lg shadow overflow-hidden">
              <!-- Venue Header -->
              <div class="px-4 py-3 bg-gradient-to-r from-gray-700 to-gray-800 text-white">
                <div class="flex items-center justify-between">
                  <div class="flex-1">
                    <h3 class="text-lg font-bold"><%= venue_data.venue.name %></h3>
                    <p class="text-sm text-gray-300">
                      <%= if venue_data.venue.city_ref, do: venue_data.venue.city_ref.name, else: "Unknown City" %>
                    </p>
                  </div>
                  <div class="ml-4">
                    <span class={
                      "px-3 py-1 text-xs rounded #{freshness_badge_class(venue_data.is_stale)}"
                    }>
                      <%= freshness_text(venue_data.is_stale) %>
                    </span>
                  </div>
                </div>
              </div>

              <!-- Primary Image -->
              <%= if venue_data.primary_image do %>
                <div class="aspect-video bg-gray-100 relative">
                  <img
                    src={venue_data.primary_image.url}
                    alt={venue_data.venue.name}
                    class="w-full h-full object-cover"
                    loading="lazy"
                  />
                  <%= if venue_data.primary_image.provider do %>
                    <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-3">
                      <div class="text-white text-xs">
                        <div>Source: <%= String.capitalize(venue_data.primary_image.provider) %></div>
                        <%= if venue_data.primary_image.attribution do %>
                          <div class="text-gray-300"><%= venue_data.primary_image.attribution %></div>
                        <% end %>
                      </div>
                    </div>
                  <% end %>
                </div>
              <% else %>
                <div class="aspect-video bg-gray-200 flex items-center justify-center">
                  <div class="text-gray-400 text-center">
                    <div class="text-2xl mb-2">🖼️</div>
                    <div class="text-sm">No images available</div>
                  </div>
                </div>
              <% end %>

              <!-- Venue Stats -->
              <div class="px-4 py-3 bg-gray-50 border-t">
                <div class="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <span class="font-medium text-gray-700">Images:</span>
                    <span class="ml-2 text-gray-900"><%= venue_data.image_count %></span>
                  </div>
                  <div>
                    <span class="font-medium text-gray-700">Cost:</span>
                    <span class="ml-2 text-gray-900"><%= format_cost(venue_data.total_cost) %></span>
                  </div>
                </div>

                <div class="mt-3">
                  <span class="text-xs font-medium text-gray-700">Provider Breakdown:</span>
                  <div class="mt-1 flex flex-wrap gap-1">
                    <%= for {provider, count} <- venue_data.provider_breakdown do %>
                      <span class="px-2 py-1 bg-indigo-100 text-indigo-800 text-xs rounded">
                        <%= String.capitalize(provider) %>: <%= count %>
                      </span>
                    <% end %>
                  </div>
                </div>

                <div class="mt-3 text-xs text-gray-500">
                  Last enriched: <%= format_date(venue_data.last_enriched) %>
                </div>
              </div>

              <!-- Metadata Details -->
              <div class="px-4 py-3 border-t">
                <details>
                  <summary class="cursor-pointer text-sm font-medium text-indigo-600 hover:text-indigo-800">
                    View Enrichment Metadata
                  </summary>
                  <div class="mt-3 p-3 bg-gray-50 rounded text-xs">
                    <pre class="overflow-x-auto"><code><%= Jason.encode!(venue_data.metadata, pretty: true) %></code></pre>
                  </div>
                </details>
              </div>
            </div>
          <% end %>
        </div>
      </div>
    <% else %>
      <!-- No Enriched Venues Message -->
      <div class="mb-8 p-8 bg-yellow-50 border border-yellow-200 rounded-lg text-center">
        <h3 class="text-lg font-semibold text-yellow-900 mb-2">
          No Enriched Venues Yet
        </h3>
        <p class="text-sm text-yellow-700 mb-4">
          No venues have been enriched with images yet. Try enriching some venues manually.
        </p>
      </div>
    <% end %>


    <!-- Footer -->
    <div class="mt-8 text-center text-sm text-gray-500">
      <p>Development testing page - Not accessible in production</p>
      <p class="mt-1">
        For production monitoring, use
        <a href="/admin/venue-images/stats" class="underline hover:text-gray-700">
          /admin/venue-images/stats
        </a>
      </p>
    </div>
  </div>
</div>

<script>
  // Manual Testing UI JavaScript
  (function() {
    let currentVenueId = null;

    // Get CSRF token from meta tag
    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

    const venueSelect = document.getElementById('venue-select');
    const providerIdEditor = document.getElementById('provider-id-editor');
    const testButtons = document.getElementById('test-buttons');
    const testResults = document.getElementById('test-results');
    const saveProviderIdsBtn = document.getElementById('save-provider-ids');
    const testAllBtn = document.getElementById('test-all-providers');
    const testProviderBtns = document.querySelectorAll('.test-provider');

    // Venue selection handler
    venueSelect.addEventListener('change', function() {
      const selectedOption = this.options[this.selectedIndex];
      currentVenueId = selectedOption.value;

      if (currentVenueId) {
        const providerIds = JSON.parse(selectedOption.dataset.providerIds || '{}');

        // Populate provider ID inputs
        document.getElementById('provider-here').value = providerIds.here || '';
        document.getElementById('provider-geoapify').value = providerIds.geoapify || '';
        document.getElementById('provider-foursquare').value = providerIds.foursquare || '';
        document.getElementById('provider-google_places').value = providerIds.google_places || '';

        // Show editor and test buttons
        providerIdEditor.classList.remove('hidden');
        testButtons.classList.remove('hidden');
        testResults.classList.add('hidden');
      } else {
        providerIdEditor.classList.add('hidden');
        testButtons.classList.add('hidden');
        testResults.classList.add('hidden');
      }
    });

    // Save provider IDs handler
    saveProviderIdsBtn.addEventListener('click', async function() {
      if (!currentVenueId) return;

      const providerIds = {
        here: document.getElementById('provider-here').value || null,
        geoapify: document.getElementById('provider-geoapify').value || null,
        foursquare: document.getElementById('provider-foursquare').value || null,
        google_places: document.getElementById('provider-google_places').value || null
      };

      // Remove null values
      Object.keys(providerIds).forEach(key => {
        if (providerIds[key] === null || providerIds[key] === '') {
          delete providerIds[key];
        }
      });

      try {
        const response = await fetch('/dev/venue-images/update-provider-ids', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'x-csrf-token': csrfToken
          },
          body: JSON.stringify({
            venue_id: currentVenueId,
            provider_ids: providerIds
          })
        });

        const result = await response.json();

        if (result.success) {
          alert('Provider IDs saved successfully!');
        } else {
          alert('Failed to save provider IDs: ' + result.error);
        }
      } catch (error) {
        alert('Error saving provider IDs: ' + error.message);
      }
    });

    // Test all providers handler
    testAllBtn.addEventListener('click', async function() {
      await testEnrichment(null);
    });

    // Test individual provider handlers
    testProviderBtns.forEach(btn => {
      btn.addEventListener('click', async function() {
        const provider = this.dataset.provider;
        await testEnrichment(provider);
      });
    });

    // Test enrichment function
    async function testEnrichment(provider) {
      if (!currentVenueId) return;

      // Show results section
      testResults.classList.remove('hidden');
      document.getElementById('test-summary').classList.add('hidden');
      document.getElementById('provider-results').innerHTML = '<div class="text-center text-gray-500">Testing...</div>';

      try {
        const response = await fetch('/dev/venue-images/test-enrichment', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-csrf-token': csrfToken
          },
          body: JSON.stringify({
            venue_id: currentVenueId,
            provider: provider
          })
        });

        const result = await response.json();

        if (result.success) {
          displayResults(result);
        } else {
          document.getElementById('provider-results').innerHTML =
            `<div class="p-4 bg-red-50 border border-red-200 rounded text-red-800">Error: ${result.error}</div>`;
        }
      } catch (error) {
        document.getElementById('provider-results').innerHTML =
          `<div class="p-4 bg-red-50 border border-red-200 rounded text-red-800">Error: ${error.message}</div>`;
      }
    }

    // Display results function
    function displayResults(result) {
      // Show summary
      document.getElementById('test-summary').classList.remove('hidden');
      document.getElementById('summary-images').textContent = result.total_images;
      document.getElementById('summary-cost').textContent = formatCost(result.total_cost);
      document.getElementById('summary-duration').textContent = result.duration_ms + 'ms';

      // Show "Save Discovered IDs" button if there are discovered IDs
      if (result.has_discovered_ids) {
        const saveButton = document.getElementById('save-discovered-ids-btn');
        if (!saveButton) {
          const summaryDiv = document.getElementById('test-summary');
          const btnHtml = `
            <div class="mt-4 flex items-center justify-between p-3 bg-yellow-50 border border-yellow-200 rounded">
              <div>
                <p class="text-sm font-medium text-yellow-900">
                  🆕 ${Object.keys(result.discovered_ids).length} new provider ID(s) discovered dynamically
                </p>
                <p class="text-xs text-yellow-700 mt-1">
                  Click "Save" to persist these IDs to the venue for future use
                </p>
              </div>
              <button
                id="save-discovered-ids-btn"
                class="ml-4 px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-yellow-500"
              >
                💾 Save Discovered IDs
              </button>
            </div>
          `;
          summaryDiv.insertAdjacentHTML('afterend', btnHtml);

          // Add event listener for save button
          document.getElementById('save-discovered-ids-btn').addEventListener('click', async function() {
            await saveDiscoveredIds(result.venue_id, result.discovered_ids);
          });
        }
      }

      // Display provider results
      const providerResultsHtml = Object.entries(result.results).map(([provider, data]) => {
        const statusClass = data.success ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200';
        const statusText = data.success ? '✓ Success' : '✗ Failed';
        const statusColor = data.success ? 'text-green-800' : 'text-red-800';

        // ID source badge
        let idSourceBadge = '';
        if (data.id_source) {
          const badgeColors = {
            'stored': 'bg-blue-100 text-blue-800',
            'dynamic': 'bg-yellow-100 text-yellow-800',
            'unavailable': 'bg-gray-100 text-gray-800'
          };
          const badgeTexts = {
            'stored': 'Stored',
            'dynamic': 'Dynamic',
            'unavailable': 'Unavailable'
          };
          const badgeClass = badgeColors[data.id_source] || 'bg-gray-100 text-gray-800';
          const badgeText = badgeTexts[data.id_source] || 'Unknown';
          idSourceBadge = `<span class="ml-2 px-2 py-1 text-xs rounded ${badgeClass}">${badgeText}</span>`;
        }

        return `
          <div class="p-4 border rounded ${statusClass}">
            <div class="flex items-center justify-between mb-2">
              <h4 class="font-semibold text-lg ${statusColor}">${provider.toUpperCase()}</h4>
              <span class="${statusColor}">${statusText}</span>
            </div>

            ${data.provider_id ? `<div class="text-xs text-gray-600 mb-2 font-mono flex items-center">ID: ${data.provider_id}${idSourceBadge}</div>` : ''}

            ${data.error ? `<div class="text-sm text-red-700 mb-2">Error: ${data.error}</div>` : ''}

            <div class="text-sm space-y-1">
              <div>Images found: <strong>${data.images_found || 0}</strong></div>
              <div>Duration: <strong>${data.duration_ms || 0}ms</strong></div>
              <div>Cost: <strong>${formatCost(data.cost || 0)}</strong></div>
            </div>

            ${data.api_calls && data.api_calls.length > 0 ? `
              <details class="mt-3">
                <summary class="cursor-pointer text-sm font-medium text-indigo-600 hover:text-indigo-800">
                  API Calls (${data.api_calls.length})
                </summary>
                <div class="mt-2 space-y-2">
                  ${data.api_calls.map(call => `
                    <div class="p-2 bg-white rounded text-xs">
                      <div>Status: ${call.status}</div>
                      <div>Message: ${call.message}</div>
                    </div>
                  `).join('')}
                </div>
              </details>
            ` : ''}

            ${data.images && data.images.length > 0 ? `
              <details class="mt-3">
                <summary class="cursor-pointer text-sm font-medium text-indigo-600 hover:text-indigo-800">
                  View Images (${data.images.length})
                </summary>
                <div class="mt-2 grid grid-cols-2 gap-2">
                  ${data.images.slice(0, 6).map(img => `
                    <div class="relative">
                      <img src="${img.url}" alt="Venue image" class="w-full h-24 object-cover rounded" />
                      <div class="text-xs text-gray-600 mt-1">
                        ${img.width}x${img.height}
                      </div>
                    </div>
                  `).join('')}
                </div>
              </details>
            ` : ''}
          </div>
        `;
      }).join('');

      document.getElementById('provider-results').innerHTML = providerResultsHtml;
    }

    // Format cost helper
    function formatCost(cost) {
      return '$' + cost.toFixed(4);
    }

    // Save discovered provider IDs function
    async function saveDiscoveredIds(venueId, discoveredIds) {
      const btn = document.getElementById('save-discovered-ids-btn');
      const originalText = btn.textContent;
      btn.disabled = true;
      btn.textContent = 'Saving...';

      try {
        const response = await fetch('/dev/venue-images/save-discovered-ids', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-csrf-token': csrfToken
          },
          body: JSON.stringify({
            venue_id: venueId,
            discovered_ids: discoveredIds
          })
        });

        const result = await response.json();

        if (result.success) {
          btn.textContent = '✓ Saved!';
          btn.classList.remove('bg-yellow-600', 'hover:bg-yellow-700');
          btn.classList.add('bg-green-600', 'hover:bg-green-700');

          // Update the venue selector to show new provider IDs
          const venueOption = venueSelect.querySelector(`option[value="${venueId}"]`);
          if (venueOption) {
            venueOption.dataset.providerIds = JSON.stringify(result.provider_ids);
            const providerCount = Object.keys(result.provider_ids).length;
            venueOption.textContent = venueOption.textContent.replace(/- \d+ providers/, `- ${providerCount} providers`);
          }

          alert(`Successfully saved ${result.saved_count} provider ID(s)!`);
        } else {
          btn.textContent = originalText;
          btn.disabled = false;
          alert('Failed to save provider IDs: ' + result.error);
        }
      } catch (error) {
        btn.textContent = originalText;
        btn.disabled = false;
        alert('Error saving provider IDs: ' + error.message);
      }
    }

    // Clear cache handler
    const clearCacheBtn = document.getElementById('clear-cache-btn');
    const clearCacheCityInput = document.getElementById('clear-cache-city');
    const clearCacheResult = document.getElementById('clear-cache-result');

    clearCacheBtn.addEventListener('click', async function() {
      const citySlug = clearCacheCityInput.value || null;

      // Confirm action
      const confirmMessage = citySlug
        ? `Are you sure you want to clear image cache for city "${citySlug}"?`
        : 'Are you sure you want to clear ALL venue image cache? This will affect all venues.';

      if (!confirm(confirmMessage)) {
        return;
      }

      const originalText = clearCacheBtn.textContent;
      clearCacheBtn.disabled = true;
      clearCacheBtn.textContent = 'Clearing...';
      clearCacheResult.classList.add('hidden');

      try {
        const response = await fetch('/dev/venue-images/clear-cache', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'x-csrf-token': csrfToken
          },
          body: JSON.stringify({
            city_slug: citySlug
          })
        });

        const result = await response.json();

        if (result.success) {
          clearCacheResult.className = 'mt-4 p-4 bg-green-50 border border-green-200 rounded';
          clearCacheResult.innerHTML = `
            <p class="text-green-800 font-medium">✓ Cache cleared successfully!</p>
            <p class="text-sm text-green-700 mt-1">
              Cleared ${result.cleared_count} venue(s)
              ${citySlug ? `in city "${citySlug}"` : '(all cities)'}
            </p>
            <p class="text-xs text-green-600 mt-2">
              You can now re-enrich these venues to fetch fresh images.
            </p>
          `;
          clearCacheResult.classList.remove('hidden');

          // Refresh the page after 2 seconds to show updated stats
          setTimeout(() => {
            window.location.reload();
          }, 2000);
        } else {
          clearCacheResult.className = 'mt-4 p-4 bg-red-50 border border-red-200 rounded';
          clearCacheResult.innerHTML = `
            <p class="text-red-800 font-medium">✗ Failed to clear cache</p>
            <p class="text-sm text-red-700 mt-1">${result.error || 'Unknown error'}</p>
          `;
          clearCacheResult.classList.remove('hidden');
        }
      } catch (error) {
        clearCacheResult.className = 'mt-4 p-4 bg-red-50 border border-red-200 rounded';
        clearCacheResult.innerHTML = `
          <p class="text-red-800 font-medium">✗ Error</p>
          <p class="text-sm text-red-700 mt-1">${error.message}</p>
        `;
        clearCacheResult.classList.remove('hidden');
      } finally {
        clearCacheBtn.disabled = false;
        clearCacheBtn.textContent = originalText;
      }
    });
  })();
</script>
